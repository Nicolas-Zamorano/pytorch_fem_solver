"""Class for 2D triangular element representation"""

import torch
from .abstract_element import AbstractElement


class ElementTri(AbstractElement):
    """Class for 2D triangular element representation"""

    @property
    def barycentric_grad(self):
        return torch.tensor([[-1.0, -1.0], [1.0, 0.0], [0.0, 1.0]])

    @property
    def reference_element_area(self):
        return 0.5

    @property
    def outward_normal(self):
        """Return the outward normal vectors of the reference triangle edges."""
        return torch.tensor([[1.0, 1.0], [-1.0, 0.0], [0.0, -1.0]])

    def compute_barycentric_coordinates(self, x: torch.Tensor):
        return torch.stack(
            [1.0 - x[..., [0]] - x[..., [1]], x[..., [0]], x[..., [1]]], dim=-2
        )

    def compute_shape_functions(
        self, bar_coords: torch.Tensor, inv_map_jacobian: torch.Tensor
    ):
        lambda_1, lambda_2, lambda_3 = torch.split(bar_coords, 1, dim=-2)

        grad_lambda_1, grad_lambda_2, grad_lambda_3 = torch.split(
            self.barycentric_grad, 1, dim=-2
        )

        if self.polynomial_order == 1:

            v = bar_coords

            v_grad = self.barycentric_grad @ inv_map_jacobian

        elif self.polynomial_order == 2:

            v = torch.concat(
                [
                    lambda_1 * (2 * lambda_1 - 1),
                    lambda_2 * (2 * lambda_2 - 1),
                    lambda_3 * (2 * lambda_3 - 1),
                    4 * lambda_1 * lambda_2,
                    4 * lambda_2 * lambda_3,
                    4 * lambda_3 * lambda_1,
                ],
                dim=-2,
            )

            v_grad = (
                torch.concat(
                    [
                        (4 * lambda_1 - 1) * grad_lambda_1,
                        (4 * lambda_2 - 1) * grad_lambda_2,
                        (4 * lambda_3 - 1) * grad_lambda_3,
                        4 * (lambda_2 * grad_lambda_1 + lambda_1 * grad_lambda_2),
                        4 * (lambda_3 * grad_lambda_2 + lambda_2 * grad_lambda_3),
                        4 * (lambda_1 * grad_lambda_3 + lambda_3 * grad_lambda_1),
                    ],
                    dim=-2,
                )
                @ inv_map_jacobian
            )
        else:

            raise NotImplementedError("Polynomial order not implemented")

        return v, v_grad

    def _compute_gauss_values(self):

        if self.integration_order == 1:

            gaussian_nodes = torch.tensor([[1 / 3, 1 / 3]])

            gaussian_weights = torch.tensor([[[1.0]]])

        elif self.integration_order == 2:

            gaussian_nodes = torch.tensor(
                [[1 / 6, 1 / 6], [2 / 3, 1 / 6], [1 / 6, 2 / 3]]
            )

            gaussian_weights = torch.tensor([[[1 / 3]], [[1 / 3]], [[1 / 3]]])

        elif self.integration_order == 3:

            gaussian_nodes = torch.tensor(
                [[1 / 3, 1 / 3], [0.2, 0.2], [0.6, 0.2], [0.2, 0.6]]
            )

            gaussian_weights = torch.tensor(
                [
                    [[-0.5625]],
                    [[0.520833333333333]],
                    [[0.520833333333333]],
                    [[0.520833333333333]],
                ]
            )

        elif self.integration_order == 4:

            gaussian_nodes = torch.tensor(
                [
                    [0.816847572980459, 0.091576213509771],
                    [0.091576213509771, 0.816847572980459],
                    [0.091576213509771, 0.091576213509771],
                    [0.108103018168070, 0.445948490915965],
                    [0.445948490915965, 0.108103018168070],
                    [0.445948490915965, 0.445948490915965],
                ]
            )

            gaussian_weights = torch.tensor(
                [
                    [[0.109951743655322]],
                    [[0.109951743655322]],
                    [[0.109951743655322]],
                    [[0.223381589678011]],
                    [[0.223381589678011]],
                    [[0.223381589678011]],
                ]
            )
        elif self.integration_order == 5:

            gaussian_nodes = torch.tensor(
                [
                    [1 / 3, 1 / 3],
                    [0.470142064105115, 0.470142064105115],
                    [0.470142064105115, 0.059715871789770],
                    [0.059715871789770, 0.470142064105115],
                    [0.101286507323456, 0.101286507323456],
                    [0.101286507323456, 0.797426985353087],
                    [0.797426985353087, 0.101286507323456],
                ]
            )

            gaussian_weights = torch.tensor(
                [
                    [[0.225000000000000]],
                    [[0.132394152788506]],
                    [[0.132394152788506]],
                    [[0.132394152788506]],
                    [[0.125939180544827]],
                    [[0.125939180544827]],
                    [[0.125939180544827]],
                ]
            )
        elif self.integration_order == 6:

            gaussian_nodes = torch.tensor(
                [
                    [0.063089014491502, 0.063089014491502],
                    [0.063089014491502, 0.873821971016996],
                    [0.873821971016996, 0.063089014491502],
                    [0.249286745170910, 0.249286745170910],
                    [0.249286745170910, 0.501426509658179],
                    [0.501426509658179, 0.249286745170910],
                    [0.053145049844817, 0.310352451033784],
                    [0.310352451033784, 0.053145049844817],
                    [0.310352451033784, 0.636502499121399],
                    [0.636502499121399, 0.310352451033784],
                    [0.636502499121399, 0.053145049844817],
                    [0.053145049844817, 0.636502499121399],
                ]
            )

            gaussian_weights = torch.tensor(
                [
                    [[0.050844906370207]],
                    [[0.050844906370207]],
                    [[0.050844906370207]],
                    [[0.116786275726379]],
                    [[0.116786275726379]],
                    [[0.116786275726379]],
                    [[0.082851075618374]],
                    [[0.082851075618374]],
                    [[0.082851075618374]],
                    [[0.082851075618374]],
                    [[0.082851075618374]],
                    [[0.082851075618374]],
                ]
            )

        elif self.integration_order == 7:

            gaussian_nodes = torch.tensor(
                [
                    [1 / 3, 1 / 3],
                    [0.065130102902216, 0.065130102902216],
                    [0.065130102902216, 0.869739794195568],
                    [0.869739794195568, 0.065130102902216],
                    [0.312865496004874, 0.048690315425316],
                    [0.048690315425316, 0.312865496004874],
                    [0.048690315425316, 0.638444188569810],
                    [0.638444188569810, 0.048690315425316],
                    [0.638444188569810, 0.312865496004874],
                    [0.312865496004874, 0.638444188569810],
                    [0.260345966079040, 0.260345966079040],
                    [0.260345966079040, 0.479308067841920],
                    [0.479308067841920, 0.260345966079040],
                ]
            )

            gaussian_weights = torch.tensor(
                [
                    [[-0.149570044467682]],
                    [[0.053347235608838]],
                    [[0.053347235608838]],
                    [[0.053347235608838]],
                    [[0.077113760890257]],
                    [[0.077113760890257]],
                    [[0.077113760890257]],
                    [[0.077113760890257]],
                    [[0.077113760890257]],
                    [[0.077113760890257]],
                    [[0.175615257433208]],
                    [[0.175615257433208]],
                    [[0.175615257433208]],
                ]
            )

        elif self.integration_order == 8:

            gaussian_nodes = torch.tensor(
                [
                    [1 / 3, 1 / 3],
                    [0.459292588292723, 0.459292588292723],
                    [0.459292588292723, 0.081414823414554],
                    [0.081414823414554, 0.459292588292723],
                    [0.170569307751760, 0.170569307751760],
                    [0.170569307751760, 0.658861384496480],
                    [0.658861384496480, 0.170569307751760],
                    [0.263112829634638, 0.008394777409958],
                    [0.008394777409958, 0.263112829634638],
                    [0.008394777409958, 0.728492392955404],
                    [0.728492392955404, 0.008394777409958],
                    [0.728492392955404, 0.263112829634638],
                    [0.263112829634638, 0.728492392955404],
                    [0.050547228317031, 0.050547228317031],
                    [0.050547228317031, 0.898905543365938],
                    [0.898905543365938, 0.050547228317031],
                ]
            )

            gaussian_weights = torch.tensor(
                [
                    [[0.144315607677787]],
                    [[0.095091634267285]],
                    [[0.095091634267285]],
                    [[0.095091634267285]],
                    [[0.103217370534718]],
                    [[0.103217370534718]],
                    [[0.103217370534718]],
                    [[0.027230314174435]],
                    [[0.027230314174435]],
                    [[0.027230314174435]],
                    [[0.027230314174435]],
                    [[0.027230314174435]],
                    [[0.027230314174435]],
                    [[0.032458497623198]],
                    [[0.032458497623198]],
                    [[0.032458497623198]],
                ]
            )

        elif self.integration_order == 9:

            gaussian_nodes = torch.tensor(
                [
                    [1 / 3, 1 / 3],
                    [0.489682519198738, 0.489682519198738],
                    [0.489682519198738, 0.020634961602525],
                    [0.020634961602525, 0.489682519198738],
                    [0.437089591492937, 0.437089591492937],
                    [0.437089591492937, 0.125820817014127],
                    [0.125820817014127, 0.437089591492937],
                    [0.188203535619033, 0.188203535619033],
                    [0.188203535619033, 0.623592928761935],
                    [0.623592928761935, 0.188203535619033],
                    [0.221962989160766, 0.036838412054736],
                    [0.036838412054736, 0.221962989160766],
                    [0.036838412054736, 0.741198598784498],
                    [0.741198598784498, 0.036838412054736],
                    [0.741198598784498, 0.221962989160766],
                    [0.221962989160766, 0.741198598784498],
                    [0.044729513394453, 0.044729513394453],
                    [0.044729513394453, 0.910540973211095],
                    [0.910540973211095, 0.044729513394453],
                ]
            )

            gaussian_weights = torch.tensor(
                [
                    [[0.097135796282799]],
                    [[0.031334700227139]],
                    [[0.031334700227139]],
                    [[0.031334700227139]],
                    [[0.077827541004774]],
                    [[0.077827541004774]],
                    [[0.077827541004774]],
                    [[0.079647738927210]],
                    [[0.079647738927210]],
                    [[0.079647738927210]],
                    [[0.043283539377289]],
                    [[0.043283539377289]],
                    [[0.043283539377289]],
                    [[0.043283539377289]],
                    [[0.043283539377289]],
                    [[0.043283539377289]],
                    [[0.025577675658698]],
                    [[0.025577675658698]],
                    [[0.025577675658698]],
                ]
            )

        elif self.integration_order == 10:

            gaussian_nodes = torch.tensor(
                [
                    [1 / 3, 1 / 3],
                    [0.485577633383657, 0.485577633383657],
                    [0.485577633383657, 0.028844733232685],
                    [0.028844733232685, 0.485577633383657],
                    [0.141707219414880, 0.307939838764121],
                    [0.307939838764121, 0.141707219414880],
                    [0.307939838764121, 0.550352941820999],
                    [0.550352941820999, 0.307939838764121],
                    [0.550352941820999, 0.141707219414880],
                    [0.141707219414880, 0.550352941820999],
                    [0.246672560639903, 0.025003534762686],
                    [0.025003534762686, 0.246672560639903],
                    [0.025003534762686, 0.728323904597411],
                    [0.728323904597411, 0.025003534762686],
                    [0.728323904597411, 0.246672560639903],
                    [0.246672560639903, 0.728323904597411],
                    [0.066803251012200, 0.009540815400299],
                    [0.009540815400299, 0.066803251012200],
                    [0.009540815400299, 0.923655933587500],
                    [0.923655933587500, 0.009540815400299],
                    [0.923655933587500, 0.066803251012200],
                    [0.066803251012200, 0.923655933587500],
                    [0.109481575485037, 0.109481575485037],
                    [0.109481575485037, 0.781036849029926],
                    [0.781036849029926, 0.109481575485037],
                ]
            )

            gaussian_weights = torch.tensor(
                [
                    [[0.090817990382754]],
                    [[0.036725957756467]],
                    [[0.036725957756467]],
                    [[0.036725957756467]],
                    [[0.072757916845420]],
                    [[0.072757916845420]],
                    [[0.072757916845420]],
                    [[0.072757916845420]],
                    [[0.072757916845420]],
                    [[0.072757916845420]],
                    [[0.028327242531057]],
                    [[0.028327242531057]],
                    [[0.028327242531057]],
                    [[0.028327242531057]],
                    [[0.028327242531057]],
                    [[0.028327242531057]],
                    [[0.009421666963733]],
                    [[0.009421666963733]],
                    [[0.009421666963733]],
                    [[0.009421666963733]],
                    [[0.009421666963733]],
                    [[0.009421666963733]],
                    [[0.045321059435528]],
                    [[0.045321059435528]],
                    [[0.045321059435528]],
                ]
            )

        else:
            raise NotImplementedError("Integration order not implemented")

        return gaussian_nodes, gaussian_weights

    def compute_det_and_inv_map(self, map_jacobian: torch.Tensor):

        ab, cd = torch.split(map_jacobian, 1, dim=-2)

        a, b = torch.split(ab, 1, dim=-1)
        c, d = torch.split(cd, 1, dim=-1)

        det_map_jacobian = (a * d - b * c).unsqueeze(-3)

        inv_map_jacobian = (1 / det_map_jacobian) * torch.stack(
            [torch.concat([d, -b], dim=-1), torch.concat([-c, a], dim=-1)], dim=-2
        )

        return det_map_jacobian, inv_map_jacobian
